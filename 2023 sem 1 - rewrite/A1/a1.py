"""
CSSE1001 Assignment 1
Semester 1, 2023
"""

( imp := __import__("constants"), __author__ := "Alexander Burow", __email__ := "Your Email", __date__ := "03/07/2024", RECIPE_NAME_PROMPT := "Please enter the recipe name: ", INGREDIENT_PROMPT := "Please enter an ingredient: ", CMD_PROMPT := "Please enter a command: ", EMPTY_MEAL_PLAN := "No recipe in meal plan yet.", RECIPE_NOT_EXIST := ("Recipe does not exist in the cook book.\n" "Use the mkrec command to create a new recipe."), QUIT := "q", HELP := "h", GENERATE := "g", LIST := "ls", LIST_RECIPE := "ls -a", LIST_SHOPPING := "ls -s", MAKE_RECIPE := "mkrec", COMMANDS := [QUIT, HELP, GENERATE, LIST, LIST_RECIPE, LIST_SHOPPING, MAKE_RECIPE], (ass := lambda array, value, pos: (array.pop(pos), array.insert(pos, value))), (get_recipe_name := lambda recipe: recipe[0]), (parse_ingredient := lambda raw_ingredient_detail: (float((ingrs := tuple( raw_ingredient_detail.split(" ", maxsplit=2)))[0]),) + ingrs[1:]), (create_recipe := lambda: (input(RECIPE_NAME_PROMPT), ",".join(ingr for ingr in iter(lambda: input(INGREDIENT_PROMPT), "")))), (recipe_ingredients := lambda recipe: tuple(parse_ingredient(ingr) for ingr in recipe[1].split(","))), (add_recipe := lambda new_recipe, recipes: recipes.append(new_recipe)), (find_recipe := lambda recipe_name, recipes: f[0] if (f := list( filter(lambda x: x[0] == recipe_name, recipes))) else None), (remove_recipe := lambda name, recipes: (recipes.remove(rec) if ( (rec := find_recipe(name, recipes)) is not None and rec in recipes) else None)), (get_ingredient_amount := lambda ingredient, recipe: f[0] if (f := list( filter(lambda x: x[-1] == ingredient, recipe_ingredients(recipe)))) else None), (add_to_shopping_list := lambda ingredient_details, shopping_list: ( (name := ingredient_details[2], amount := ingredient_details[0]), guard := False, [ ass(shopping_list, (s_amount + amount, unit, name), i) for i, (s_amount, unit, s_name) in enumerate(shopping_list) if s_name == name and (guard := True)], (shopping_list.append(ingredient_details) if not guard else None))), (remove_from_shopping_list := lambda ingredient_name, amount, shopping_list: [ ass(shopping_list, (n_amount, unit, s_name), i) if ((name_match := (s_name == ingredient_name)) and (n_amount := s_amount - amount) > 0) else ( shopping_list.pop(i) if name_match and n_amount <= 0 else None ) for i, (s_amount, unit, s_name) in enumerate(shopping_list) ]), (generate_shopping_list := lambda recipes: (shop_list := [], [add_to_shopping_list(ingredient, shop_list) for recipe in recipes for ingredient in recipe_ingredients(recipe)])[0]), (display_ingredients := lambda shopping_list: ( pad_amounts := [0, 0, 0], justs := [">", "^", "<"], (update_amount := lambda amount, i: (pad_amounts.pop(i), pad_amounts.insert(i, amount)) if amount > pad_amounts[i] else None), [update_amount(len(str(detail)), i) for details in shopping_list for i, detail in enumerate(details)], [print(f"| {detail:{justs[i]}{pad_amounts[i] + (1 if i else 0)}} ", end="") if i < len(details) - 1 else print(f"| {detail:{justs[i]}{pad_amounts[i] + (1 if i else 0)}} |") for details in shopping_list for i, detail, in enumerate(details)] )), (sanitise_command := lambda command: ( (trans := lambda s: s.translate(str.maketrans("", "", "01234567890"))), trans(command.lower()).strip())[-1]), (process_command := lambda command: (g := ( command := ((sanitise_command(com[0]), float(com[1])) if (com := command.rsplit(" ", maxsplit=1) )[-1].isdecimal() else (sanitise_command(command), None)), ret_code := [0], name := [None], [(ret_code.pop(0), ret_code.append(p_ret_code)) for p_ret_code, com in enumerate(COMMANDS) if command[0] == com], ((ret_code.pop(0), ret_code.append(len(COMMANDS)), name.append(command[0].split(" ", maxsplit=1)[1])) if command[0].startswith("add") else None), ((ret_code.pop(0), ret_code.append(len(COMMANDS) + 1), name.append(command[0].rsplit(" ", maxsplit=1)[-1])) if command[0].startswith("rm -i") and command[1] is not None else ((ret_code.pop(0), ret_code.append(len(COMMANDS) + 2), name.append(command[0].split(" ", maxsplit=1)[-1])) if command[0].startswith("rm") and command[1] is None else None)) ), g[1][0], g[0][1], g[2][-1])[-3:]), main := lambda: ( recipe_collection := [ imp.CHOCOLATE_PEANUT_BUTTER_SHAKE, imp.BROWNIE, imp.SEITAN, imp.CINNAMON_ROLLS, imp.PEANUT_BUTTER, imp.MUNG_BEAN_OMELETTE], meal_plan := [], shop_list := [], execute_map := {1: lambda _: print(imp.HELP_TEXT), 2: lambda _: (display_ingredients( ([shop_list.append(item) for item in generate_shopping_list(meal_plan)], shop_list)[-1]) if meal_plan else None), 3: lambda _: (print(meal_plan) if meal_plan else print(EMPTY_MEAL_PLAN)), 4: lambda _: print("\n".join( get_recipe_name(recipe) for recipe in recipe_collection)), 5: lambda _: ( display_ingredients(shop_list) if shop_list else None), 6: lambda _: add_recipe(create_recipe(), recipe_collection), 7: lambda meta: (add_recipe(details, meal_plan) if (details := find_recipe(meta[2], recipe_collection)) else print(RECIPE_NOT_EXIST)), 8: lambda meta: remove_from_shopping_list(meta[2], meta[1], shop_list), 9: lambda meta: remove_recipe(meta[2], meal_plan)}, execute := lambda x: execute_map[x[0]](x), [ execute(process_command(command)) for command in iter(lambda: input(CMD_PROMPT).lower(), "q")]), main()) 
